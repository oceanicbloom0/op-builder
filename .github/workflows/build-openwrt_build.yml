name: Build OpenWrt => Build

on:
  repository_dispatch:
    types: [trigger-build-openwrt_build]

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      actions: write
    strategy:
      fail-fast: false
    env:
      OPENWRT_PATH: ${{  github.event.client_payload.variables.OPENWRT_PATH }}
      CURRENT_BRANCH: ${{  github.event.client_payload.variables.CURRENT_BRANCH }}
      SOURCE_REPO: ${{  github.event.client_payload.variables.SOURCE_REPO }}
      DEVICE: ${{ github.event.client_payload.variables.DEVICE}}
      SOURCE_BRANCH: ${{github.event.client_payload.variables.SOURCE_BRANCH}}
      TOOLCHAIN_TAG: ${{github.event.client_payload.variables.TOOLCHAIN_TAG}}
      APP_CONFIG: ${{github.event.client_payload.variables.APP_CONFIG}}
      ssh: ${{github.event.client_payload.variables.ssh}}
      only_ssh: ${{github.event.client_payload.variables.only_ssh}}
      SOURCE_URL: ${{github.event.client_payload.variables.SOURCE_URL}}
      running_ssh_device: ${{ github.event.client_payload.variables.running_ssh_device }}
      FIRMWARE_NAME: ${{ github.event.client_payload.variables.FIRMWARE_NAME }}

    steps:
      - name: Record Start Time
        id: start
        run: echo "time=$(date +%s)" >> $GITHUB_ENV

      # - name: Trigger Another Workflow
      #   uses: peter-evans/repository-dispatch@v3
      #   if: ${{ env.RUNNER_PASS == 'false' }}
      #   with:
      #     event-type: trigger-build-openwrt_build
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     client-payload: |-
      #       {
      #         "variables": {
      #         }
      #       }

      - name: Cancel redundant workflows under SSH
        if: ${{ (env.ssh == 'true' || env.only_ssh == 'true')  && env.DEVICE != env.running_ssh_device }}
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/runs/${{github.run_id}}/cancel

      - name: Free up disk space
        if: ${{ env.only_ssh == 'false' && env.ssh == 'false' }}
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          docker-images: false

      - name: Combination disk
        continue-on-error: true
        run: |
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES /root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /root.img)
          sudo pvcreate -f $ROOT_LOOP_DEVNAME
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
          sudo pvcreate -f $MNT_LOOP_DEVNAME
          sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo lvcreate -n lvstorage -l 100%FREE vgstorage
          export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}')
          sudo mkfs.btrfs -L combinedisk $LV_DEVNAME
          sudo mount -o compress=zstd $LV_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          mkdir -p $GITHUB_WORKSPACE/tmp && chmod 777 $GITHUB_WORKSPACE/tmp
          sudo cp -rp /tmp/* $GITHUB_WORKSPACE/tmp
          sudo mount -B $GITHUB_WORKSPACE/tmp /tmp && df -hT

          # 这里挂载会影响到$GITHUB_WORKSPACE，不要在后续步骤挂载，最好在编译步骤开启就运行~

      - name: Checkout
        run: |
          cd $GITHUB_WORKSPACE
          git init
          git remote add origin https://github.com/$GITHUB_REPOSITORY
          git fetch
          git checkout -t origin/$CURRENT_BRANCH

      - name: SSH
        if: ${{ env.only_ssh == 'true'}}
        env:
          CLOUDFLARED_TOKEN: ${{ secrets.CLOUDFLARED_TOKEN }}
        run: |
          /bin/bash $GITHUB_WORKSPACE/scripts/ssh.sh ${{ github.repository_owner }} > /dev/null 2>&1

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"

          ulimit -u 10000 && ulimit -n 4096 && ulimit -d unlimited && ulimit -m unlimited && ulimit -s unlimited && ulimit -t unlimited && ulimit -v unlimited

          sudo apt update -y
          sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-pyelftools
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Mount toolchain
        run: |

          for i in {0..9}
          do
            echo downloading..
            curl -fsL -k https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/toolchain-$SOURCE_REPO-$SOURCE_BRANCH-${{ env.DEVICE }}.img.0$i >> toolchain-$SOURCE_REPO-$SOURCE_BRANCH-${{ env.DEVICE }}.img || break
          done
          mkdir -p openwrt-ro openwrt workdir overlay
          sudo mount -o loop toolchain-$SOURCE_REPO-$SOURCE_BRANCH-${{ env.DEVICE }}.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          echo $GITHUB_WORKSPACE
          echo $OPENWRT_PATH
          cd $OPENWRT_PATH
          git pull

      - name: Add packages
        run: |
          cd $OPENWRT_PATH          
          chmod +x $GITHUB_WORKSPACE/scripts/openwrt/add-package.sh
          $GITHUB_WORKSPACE/scripts/openwrt/add-package.sh
          git pull
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Update configuration
        run: |
          cd $OPENWRT_PATH
          bash $GITHUB_WORKSPACE/scripts/openwrt/copy-config.sh
          sed -i '/CONFIG_DEFAULT_luci/'d .config

      - name: Output the plugin list
        run: |
          cd $OPENWRT_PATH
          make defconfig

          ## 输出LUCI-APP
          echo
          echo "=========================================="
          grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
          grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
          sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
          sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
          sed -i '/qbittorrent_static/d' Plug-in > /dev/null 2>&1
          sed -i 's/=y/\ /g' Plug-in
          awk '$0=NR$0' Plug-in > Plug-2
          awk '{print "	" $0}' Plug-2 > Plug-in
          echo
          echo
          echo "	      已选插件列表"
          cat Plug-in
          rm -rf {Plug-in,Plug-2}
          echo
          echo "=========================================="

      - name: Make download
        run: |
          cd $OPENWRT_PATH
          make download -j8

      - name: Replace source code files
        run: |
          cd $OPENWRT_PATH

          if [ -n "$(ls -A "$GITHUB_WORKSPACE/files" 2>/dev/null)" ]; then
           cp -Rf $GITHUB_WORKSPACE/files/* ./
          fi

      - name: SSH
        if: ${{ env.ssh == 'true'}}
        env:
          CLOUDFLARED_TOKEN: ${{ secrets.CLOUDFLARED_TOKEN }}
        run: |
          /bin/bash $GITHUB_WORKSPACE/scripts/ssh.sh ${{ github.repository_owner }} > /dev/null 2>&1

      - name: Defconfig
        run: |
          cd $OPENWRT_PATH
          ./scripts/diffconfig.sh > defconfig

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: config-${{ env.DEVICE }}
          path: ${{ env.OPENWRT_PATH }}/defconfig

      - name: Compile Packages
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make diffconfig
          make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Generate firmware
        id: generate
        run: |
          cd $OPENWRT_PATH
          mkdir -p files/etc/uci-defaults
          envsubst < $GITHUB_WORKSPACE/scripts/openwrt/init-settings.sh.template > files/etc/uci-defaults/99-init-settings
          make package/install -j$(nproc)  || make package/install -j1 V=s
          make target/install -j$(nproc)  || make target/install -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          make json_overview_image_info
          make checksum

      - name: Organize files
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*

          rm -rf \
          packages \
          sha256* \
          *manifest \
          *.sha \
          *info \
          *kernel.bin \
          *sha \
          *json

          bash $GITHUB_WORKSPACE/scripts/openwrt/rename-bins.sh

          echo "PACKAGED_OUTPUTPATH=$PWD" >> $GITHUB_ENV

      - name: Package Armvirt as OpenWrt
        if: ${{env.DEVICE=='n1'}}
        uses: ophub/flippy-openwrt-actions@main
        env:
          OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*rootfs.tar.gz
          PACKAGE_SOC: s905d
          WHOAMI: ${{ env.FIRMWARE_NAME }}

      - name: Generate variables
        run: |
          cd $OPENWRT_PATH

          echo "DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "release_tag=${{ env.CURRENT_BRANCH }}-$(date +'%Y.%m.%d')-download" >> $GITHUB_ENV
          # echo "DEVICES=$(echo '${{ needs.generate-matrix.outputs.matrix }}' | jq -r '.include[].device' | tr '\n' ' ')" >> $GITHUB_ENV
          echo "BIN_PATH=openwrt/${{ env.DEVICE }}/${{ env.CURRENT_BRANCH }}" >> $GITHUB_ENV

          # Calculate and Save Duration
          end_time=$(date +%s)
          duration=$((end_time - ${{ env.time }}))
          minutes=$((duration / 60))
          seconds=$((duration % 60))
          echo "build_duration=${minutes} minutes and ${seconds} seconds" >> $GITHUB_ENV

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.FIRMWARE_NAME }}
          tag_name: bins
          body: |
            The build took ${{ env.build_duration }}.
          files: ${{ env.PACKAGED_OUTPUTPATH }}/*

      # - name: TG Notification - ✔️
      #   if: ${{ success() }}
      #   continue-on-error: true
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHANNEL_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     message: |
      #       The ${{ env.DEVICE }} firmware has been compiled and took ${{ env.build_duration }}.
      #
      #       Download：https://github.com/${{ github.repository }}/releases/tag/${{ env.release_tag }}

      - uses: otto-de/purge-deprecated-workflow-runs@v2
        with:
          remove-failed: true
          remove-cancelled: true
          remove-skipped: true

      - name: Delete Older Releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 7
          delete_tag_pattern: download
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

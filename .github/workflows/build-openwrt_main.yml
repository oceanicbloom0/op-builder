name: Build OpenWrt => Main

on:
  workflow_dispatch:
    inputs:
      openwrt_source:
        description: "OpenWRT source repository"
        required: true
        default: "https://github.com/coolsnowwolf/lede.git"
      openwrt_source_branch:
        description: "Branch of the OpenWRT source repository"
        required: true
        default: "master"
      app_config_path:
        description: "Path to the application configuration file"
        required: true
        default: "configs/app.config"
      trigger-build-event-type:
        description: "Trigger build event type name"
        required: true
        default: "trigger-build-openwrt"
      TOOLCHAIN_TAG:
        description: "Release tag used to store or retrieve the toolchain"
        required: true
        default: "Toolchain"
      FIRMWARE_NAME:
        description: "Name of the firmware to be built and released"
        required: true
        default: "OpenWrt"
      RELEASE_TAG:
        description: "Name of the release tag for the firmware"
        required: true
        default: "bins"
      ssh:
        description: "Enable SSH"
        required: true
        type: boolean
      only_ssh:
        description: "Use SSH only"
        required: true
        type: boolean
      running_ssh_device:
        description: "Name of the device where SSH is running"
        required: true
        default: "x86-64"
      devices_to_build:
        description: "Select devices to build (select none to build all)"
        required: false
        type: choice
        default: "all"
        options:
          - all
  repository_dispatch:
    types: [trigger-build-openwrt_main]

env:
  SOURCE_URL: ${{ inputs.openwrt_source }}
  SOURCE_BRANCH: ${{ inputs.openwrt_source_branch }}
  TOOLCHAIN_TAG: ${{ inputs.TOOLCHAIN_TAG }}
  APP_CONFIG: ${{ inputs.app_config_path }}

jobs:
  generate-matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: set-matrix
        run: |
          cd configs
          matrix="{\"include\":["
          
          # Get selected device from input
          selected_device="${{ inputs.devices_to_build }}"
          
          # If "all" is selected or no specific device, build all
          if [ "$selected_device" = "all" ] || [ -z "$selected_device" ]; then
            for d in */ ; do
                if [ "$d" = "STANDALONE_CONF/" ]; then
                    continue
                fi
                device_name=${d%/}
                matrix="$matrix{\"device\":\"$device_name\"},"
            done
            if [ -d "STANDALONE_CONF" ]; then
                cd STANDALONE_CONF
                for d in */ ; do
                    device_name=${d%/}
                    matrix="$matrix{\"device\":\"$device_name\"},"
                done
                cd ..
            fi
          else
            # Build only the selected device
            # Check if device exists in main configs
            if [ -d "$selected_device" ]; then
              matrix="$matrix{\"device\":\"$selected_device\"},"
            # Check if device exists in STANDALONE_CONF
            elif [ -d "STANDALONE_CONF/$selected_device" ]; then
              matrix="$matrix{\"device\":\"$selected_device\"},"
            else
              echo "Error: Device '$selected_device' not found in configs directory"
              exit 1
            fi
          fi
          
          matrix=${matrix%,}
          matrix="$matrix]}"
          cd ..
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo $matrix

  trigger-build:
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trigger Another Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: ${{ inputs.trigger-build-event-type }}
          token: ${{ secrets.GITHUB_TOKEN }}
          client-payload: |-
            {
              "variables": {
                "DEVICE": "${{ matrix.device }}",
                "SOURCE_BRANCH": "${{ env.SOURCE_BRANCH }}",
                "TOOLCHAIN_TAG": "${{ env.TOOLCHAIN_TAG }}",
                "APP_CONFIG": "${{ env.APP_CONFIG }}",
                "ssh": "${{ inputs.ssh }}",
                "only_ssh": "${{ inputs.only_ssh }}",
                "SOURCE_URL": "${{ env.SOURCE_URL }}",
                "running_ssh_device": "${{ inputs.running_ssh_device }}",
                "FIRMWARE_NAME": "${{ inputs.FIRMWARE_NAME }}",
                "RELEASE_TAG": "${{ inputs.RELEASE_TAG }}"
              }
            }

name: Build OpenWrt => Main

on:
  # push:
  #   paths:
  #     - "configs/**"
  #     - ".github/workflows/build-openwrt.yml"
  #     - "scripts/openwrt/**"
  #   branches-ignore:
  #     - stable
  #schedule:
  #  - cron: "0 19 * * *"
  workflow_dispatch:
    inputs:
      start:
        description: "start"
        required: false
        default: "true"
      ssh:
        description: "SSH"
        required: false
        default: ""
      only_ssh:
        description: "Only SSH"
        required: false
        default: ""

  repository_dispatch:
    types: [trigger-build-openwrt_main]

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  TOOLCHAIN_TAG: Toolchain
  SOURCE: lede
  TZ: Asia/Shanghai
  APP_CONFIG: configs/app.config

jobs:
  generate-matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: set-matrix
        run: |
          cd configs
          matrix="{\"include\":["
              
          for d in */ ; do
              if [ "$d" = "STANDALONE_CONF/" ]; then
                  continue
              fi
              device_name=${d%/}
              matrix="$matrix{\"device\":\"$device_name\"},"
          done
              
          if [ -d "STANDALONE_CONF" ]; then
              cd STANDALONE_CONF
              for d in */ ; do
                  device_name=${d%/}
                  matrix="$matrix{\"device\":\"$device_name\"},"
              done
              cd ..
          fi
              
          matrix=${matrix%,}
          matrix="$matrix]}"
              
          cd ..
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo $matrix

  Toolchain:
    needs: generate-matrix

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    runs-on: ubuntu-22.04

    outputs:
      OPENWRT_PATH: ${{ steps.clone.outputs.OPENWRT_PATH }}
      VERSION_INFO: ${{ steps.clone.outputs.VERSION_INFO }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone code
        id: clone
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone $SOURCE_URL -b $SOURCE_BRANCH openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "OPENWRT_PATH=$(echo $PWD)" >> $GITHUB_OUTPUT
          export VERSION_INFO=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          echo "VERSION_INFO=$(echo $VERSION_INFO)" >> $GITHUB_OUTPUT

      - name: Generate variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=$(echo $CURRENT_BRANCH)" >> $GITHUB_OUTPUT
          cd $OPENWRT_PATH
          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo $SOURCE_REPO)" >> $GITHUB_OUTPUT
          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo $DEVICE_TARGET)" >> $GITHUB_OUTPUT
          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo $DEVICE_SUBTARGET)" >> $GITHUB_OUTPUT
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_REPO-$SOURCE_BRANCH-${{ matrix.Device }}"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=$(echo $TOOLCHAIN_IMAGE)" >> $GITHUB_OUTPUT

      - name: Compare Toolchain Hash
        id: hash
        run: |
          cd $OPENWRT_PATH
          export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
          echo "CURRENT_HASH is $CURRENT_HASH"
          export CACHE_HASH=$(curl -fSsL -k https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.hash)
          echo "CACHE_HASH is $CACHE_HASH"
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo "REBUILD_TOOLCHAIN=true" >> $GITHUB_OUTPUT
          fi

      - name: Install compilation dependencies
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/*
          sudo -E apt-get -qq update

          sudo apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-pyelftools

          sudo -E apt-get -qq install aria2 clang clangd ecj lib32gcc-s1 libfuse-dev libncursesw5 \
          libpython3-dev lld lldb python3-ply re2c

          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: Generate Toolchain Configuration
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |

          mv configs/${{ matrix.Device }}/.config $OPENWRT_PATH/.config
          cat $GITHUB_WORKSPACE/$APP_CONFIG >> $OPENWRT_PATH/.config
          cd $OPENWRT_PATH && make defconfig
          sed -i '/CONFIG_DEFAULT_luci/'d .config

          echo -e "\nCONFIG_ALL=y" >> $OPENWRT_PATH/.config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          make defconfig > /dev/null 2>&1

      - name: Install Feeds
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Compile Tools
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_PATH
          make defconfig
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: Compile Toolchain
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          rm -rf .config* dl bin

      - name: Generate Toolchain Image
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          mksquashfs openwrt $TOOLCHAIN_IMAGE -force-gid 1001 -force-uid 1001 -comp zstd
          mkdir -p $GITHUB_WORKSPACE/output
          split -d -b 1900M $TOOLCHAIN_IMAGE $GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.img.
          rm $TOOLCHAIN_IMAGE
          echo $CURRENT_HASH > $GITHUB_WORKSPACE/output/$TOOLCHAIN_IMAGE.hash
          ls -lh $GITHUB_WORKSPACE/output

      - name: Upload Toolchain Image to Release
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: ncipollo/release-action@main
        with:
          name: Toolchain
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.TOOLCHAIN_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*
          body: toolchain

  Trigger-build:
    needs: [generate-matrix, Toolchain]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}

    steps:
      - name: Check variables
        run: |
          if [ -z "${{ inputs.ssh }}" ]; then
            echo "Input variable 'ssh' does not exist. Setting default value."
            export SSH_VAR='default_value'
            echo "ssh=false" >> $GITHUB_ENV
          else
            echo "Input variable 'ssh' exists. Setting value to GitHub environment."
            echo "ssh=${{ inputs.ssh }}" >> $GITHUB_ENV
          fi

          if [ -z "${{ inputs.only_ssh }}" ]; then
            echo "Input variable 'only_ssh' does not exist. Setting default value."
            export only_ssh_VAR='default_value'
            echo "only_ssh=false" >> $GITHUB_ENV
          else
            echo "Input variable 'only_ssh' exists. Setting value to GitHub environment."

            echo "only_ssh=${{ inputs.only_ssh }}" >> $GITHUB_ENV
          fi

      - name: Trigger Another Workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: trigger-build-openwrt_build
          token: ${{ secrets.GITHUB_TOKEN }}
          client-payload: |-
            {
              "variables": {
                "OPENWRT_PATH": "${{needs.Toolchain.outputs.OPENWRT_PATH }}",
                "CURRENT_BRANCH": "${{needs.Toolchain.outputs.CURRENT_BRANCH }}",
                "SOURCE_REPO": "${{needs.Toolchain.outputs.SOURCE_REPO }}",
                "DEVICE": "${{matrix.Device }}",
                "SOURCE_BRANCH": "${{env.SOURCE_BRANCH }}",
                "TOOLCHAIN_TAG": "${{env.TOOLCHAIN_TAG}}",
                "APP_CONFIG": "${{env.APP_CONFIG}}",
                "ssh": "${{env.ssh}}",
                "only_ssh": "${{env.only_ssh}}",
                "SOURCE_URL": "${{env.SOURCE_URL}}"
              }
            }
